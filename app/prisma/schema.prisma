generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model User {
  id            String         @id @default(cuid())
  name          String?
  email         String?        @unique
  role          UserRole       @default(PARTICIPANT)
  emailVerified DateTime?      @map("email_verified")
  image         String?
  accounts      Account[]
  events        Event[]
  registrations Registration[]
  sessions      Session[]
  leader        Team?

  @@map("users")
}

model Team {
  id       String @id @default(cuid())
  name     String
  eventId  String @map("event_id")
  leaderId String @unique
  event    Event  @relation(fields: [eventId], references: [id])
  leader   User   @relation(fields: [leaderId], references: [id])

  @@map("teams")
}

model Event {
  id               String         @id @default(cuid())
  name             String         @unique
  description      String
  date             DateTime
  location         String
  coordinatorEmail String?        @map("coordinator_email")
  createdAt        DateTime       @default(now())
  isTeamEvent      Boolean        @default(false) @map("is_team_event")
  coordinator      User?          @relation(fields: [coordinatorEmail], references: [email])
  registrations    Registration[]
  teams            Team[]

  @@map("events")
}

model Registration {
  id       String  @id @default(cuid())
  userId   String
  eventId  String
  attended Boolean @default(false)
  event    Event   @relation(fields: [eventId], references: [id])
  user     User    @relation(fields: [userId], references: [id])

  @@unique([userId, eventId])
  @@map("registrations")
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationtokens")
}

enum UserRole {
  PARTICIPANT
  ADMIN
}
