generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model User {
  id              String         @id @default(cuid())
  name            String?
  email           String?        @unique
  role            UserRole       @default(PARTICIPANT)
  emailVerified   DateTime?      @map("email_verified")
  created_at      DateTime       @default(now())
  updated_at      DateTime       @updatedAt
  image           String?
  accounts        Account[]
  events          Event[]
  registrations   Registration[]
  sessions        Session[]
  teamMemberships TeamMember[]
  teams           Team[]         @relation("UserTeams") // Fixed relation name
  issues          Issues[]

  @@map("users")
}

model Team {
  id            String         @id @default(cuid())
  name          String
  eventId       String         @map("event_id")
  leaderId      String
  created_at    DateTime       @default(now())
  updated_at    DateTime       @updatedAt
  registrations Registration[]
  members       TeamMember[]
  event         Event          @relation(fields: [eventId], references: [id])
  leader        User           @relation(fields: [leaderId], references: [id], name: "UserTeams") // Fixed relation name

  @@map("teams")
}

model TeamMember {
  id     String @id @default(cuid())
  teamId String
  userId String
  team   Team   @relation(fields: [teamId], references: [id])
  user   User   @relation(fields: [userId], references: [id])

  @@unique([teamId, userId])
  @@map("team_members")
}

model Event {
  id                     String         @id @default(cuid())
  name                   String         @unique
  description            String
  date                   DateTime
  location               String
  eventType              EventType
  maxParticipants        Int?
  registrationDeadline   DateTime?
  minParticipantsPerTeam Int?
  maxParticipantsPerTeam Int?
  coordinatorEmail       String?        @map("coordinator_email")
  createdAt              DateTime       @default(now())
  isTeamEvent            Boolean        @default(false) @map("is_team_event")
  coordinator            User?          @relation(fields: [coordinatorEmail], references: [email])
  registrations          Registration[]
  teams                  Team[]

  @@map("events")
}

model Registration {
  id        String   @id @default(cuid())
  userId    String
  eventId   String
  attended  Boolean  @default(false)
  createdAt DateTime @default(now())
  teamId    String?
  event     Event    @relation(fields: [eventId], references: [id])
  team      Team?    @relation(fields: [teamId], references: [id])
  user      User     @relation(fields: [userId], references: [id])

  @@unique([userId, eventId])
  @@map("registrations")
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationtokens")
}

model Issues {
  id          String   @id @default(cuid())
  title       String
  description String
  createdAt   DateTime @default(now())
  userId      String
  user        User?    @relation(fields: [userId], references: [id])

  @@map("issues")
}

enum EventType {
  INDIVIDUAL
  TEAM
}

enum UserRole {
  PARTICIPANT
  ADMIN
}
